---
alwaysApply: true
---

# Constants Centralization Rule

## Rule: All constants must be defined in `lib/constants.ts`

### Requirements:
- **FORBIDDEN**: Defining constants directly in component files, utility files, or any other location
- **REQUIRED**: All constants must be defined in `lib/constants.ts` and imported where needed
- **REQUIRED**: Use descriptive, UPPER_SNAKE_CASE names for constants
- **REQUIRED**: Group related constants in objects when appropriate
- **REQUIRED**: Export constants from `lib/constants.ts` using named exports

### Examples:

#### ✅ ALLOWED - Constants in `lib/constants.ts`:
```typescript
// lib/constants.ts
export const API_ENDPOINTS = {
  USERS: '/api/users',
  TESTS: '/api/tests',
  REPORTS: '/api/reports'
} as const

export const DEFAULT_TIMEOUT = 5000
export const MAX_RETRY_ATTEMPTS = 3
export const SUPPORTED_FILE_TYPES = ['json', 'csv', 'txt'] as const
```

#### ✅ ALLOWED - Importing constants:
```typescript
// components/SomeComponent.tsx
import { API_ENDPOINTS, DEFAULT_TIMEOUT } from '@/lib/constants'

function SomeComponent() {
  const response = await fetch(API_ENDPOINTS.USERS, {
    timeout: DEFAULT_TIMEOUT
  })
}
```

#### ❌ FORBIDDEN - Constants defined inline:
```typescript
// components/SomeComponent.tsx
function SomeComponent() {
  const API_URL = '/api/users' // FORBIDDEN
  const TIMEOUT = 5000 // FORBIDDEN
  
  const response = await fetch(API_URL, { timeout: TIMEOUT })
}
```

#### ❌ FORBIDDEN - Constants in utility files:
```typescript
// lib/utils.ts
export const CONFIG_VALUES = { // FORBIDDEN
  MAX_SIZE: 100,
  MIN_SIZE: 1
}

export function validateSize(size: number) {
  return size >= CONFIG_VALUES.MIN_SIZE && size <= CONFIG_VALUES.MAX_SIZE
}
```

### What constitutes a constant:
- String literals used in multiple places
- Numeric values (timeouts, limits, sizes)
- Configuration objects
- Enum-like objects
- Array literals with fixed values
- Any value that doesn't change during runtime

### Exception:
- Only local variables that are truly component-specific and used only once may remain inline
- Magic numbers in mathematical calculations (e.g., `Math.PI * 2`) are acceptable
- Template literals for dynamic content are acceptable

### Enforcement:
- Always move constants to `lib/constants.ts` before implementing features
- When refactoring, identify and move any inline constants
- Use TypeScript's `as const` assertion for better type safety
- Group related constants in objects for better organization# Constants Centralization Rule

## Rule: All constants must be defined in `lib/constants.ts`

### Requirements:
- **FORBIDDEN**: Defining constants directly in component files, utility files, or any other location
- **REQUIRED**: All constants must be defined in `lib/constants.ts` and imported where needed
- **REQUIRED**: Use descriptive, UPPER_SNAKE_CASE names for constants
- **REQUIRED**: Group related constants in objects when appropriate
- **REQUIRED**: Export constants from `lib/constants.ts` using named exports

### Examples:

#### ✅ ALLOWED - Constants in `lib/constants.ts`:
```typescript
// lib/constants.ts
export const API_ENDPOINTS = {
  USERS: '/api/users',
  TESTS: '/api/tests',
  REPORTS: '/api/reports'
} as const

export const DEFAULT_TIMEOUT = 5000
export const MAX_RETRY_ATTEMPTS = 3
export const SUPPORTED_FILE_TYPES = ['json', 'csv', 'txt'] as const
```

#### ✅ ALLOWED - Importing constants:
```typescript
// components/SomeComponent.tsx
import { API_ENDPOINTS, DEFAULT_TIMEOUT } from '@/lib/constants'

function SomeComponent() {
  const response = await fetch(API_ENDPOINTS.USERS, {
    timeout: DEFAULT_TIMEOUT
  })
}
```

#### ❌ FORBIDDEN - Constants defined inline:
```typescript
// components/SomeComponent.tsx
function SomeComponent() {
  const API_URL = '/api/users' // FORBIDDEN
  const TIMEOUT = 5000 // FORBIDDEN
  
  const response = await fetch(API_URL, { timeout: TIMEOUT })
}
```

#### ❌ FORBIDDEN - Constants in utility files:
```typescript
// lib/utils.ts
export const CONFIG_VALUES = { // FORBIDDEN
  MAX_SIZE: 100,
  MIN_SIZE: 1
}

export function validateSize(size: number) {
  return size >= CONFIG_VALUES.MIN_SIZE && size <= CONFIG_VALUES.MAX_SIZE
}
```